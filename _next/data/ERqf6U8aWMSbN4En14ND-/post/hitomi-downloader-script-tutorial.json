{"pageProps":{"user":{"name":"SaidBySolo","email":"saidbysolo@gmail.com","bio":":D","avatar":"https://avatars.githubusercontent.com/u/33891531"},"data":{"title":"히토미 다운로더 스크립트를 작성해보아요","author":"saidbysolo","date":1637798400000,"sort":"야 너두 추출기 만들수있어.","thumbnail":"ssanganung.png","slug":"hitomi-downloader-script-tutorial","source":"Hitomi Downloader script tutorial"},"mdxModule":"\n## 두려워져요\n\n물론 기존에 작성되어있는 [예제](https://github.com/KurtBestor/Hitomi-Downloader/wiki/How-to-write-a-script)가 있긴하다.\n\n근데 저것만으로는 어케 작성할지 막막하다.\n\n이 글을 보면 어느정도는 작성이 가능할것이다.\n\n## 준비물\n\n1. Python3\n2. bs4를 써보았다.\n3. requests를 써보았다.\n\n어느정도 프로그래밍 지식을 알고있다는 가정하에 이 글을 작성할것이다.\n\n제가 그래야 설명하기 편하거든요.\n\n## 진짜 준비\n\nhttps://github.com/Hitomi-Downloader-extension/Hitomi-Downloader-Stubs/releases/tag/For-Download\n\n스텁파일을 받아두자.\n\nKurtBestor님이 제공해주신 소스코드를 바탕으로 작성된 타입힌팅 파일이다.\n\n모든 메소드는 아니더라도, 주로 쓰이는 메소드는 힌팅이되있다.\n\n글쓴이의 개발환경은 이러하다.\n\n* Windows 10\n* Python 3.9.1 (venv)\n* VScode\n* Pylance (strict)\n\n본인은 타입힌트를 엄격하게 적용한다.\n\n근데 적용 안해도 문제는 없고 괜히 돌리면 머리아파지니 기본값인 basic 모드로 돌리고 힌팅만 제공받도록하자.\n\n## 자 드가자~\n\nVenv 설정을 빠르게 해주도록하자.\n\n```sh\npy -m venv .venv\n```\n\n![venv](./venv.png)\n\nvscode 콘솔 재시작.\n\n![apply_venv](./apply_venv.png)\n\n일케 뜨면 정상.\n\n스텁 파일들을 작업폴더에 붙여넣자.\n\n![pasted](./pasted.png)\n\n```sh\npip install requests bs4\n```\n\n필요한것들을 설치해주자.\n\n이러면 거의 준비가됬다.\n\n## 사이트 뜯기\n\n그나마 구조가 쉬운 talk.op.gg를 빠르게 뜯어볼것이다.\n\n~~미안해요 옵지~~\n\nhttps://talk.op.gg/s/lol/free/589588/op-gg%EB%8A%94-%EC%9D%BC%EB%A3%A8%EB%AF%B8%EB%82%98%ED%8B%B0%EC%9D%B4%EB%8B%A4\n\nop.gg는 일루미나티이다.\n\n글의 사진을 전부 가져와보자.\n\n<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> 를 눌러 빠르게 콘솔창 진입.\n\n![devtool](./devtool.png)\n\n첫번째꺼 누르기 \n\n![selected](./selected.png)\n\n이미지를 가져다대고 엘리먼트를 보면\n\n\"아 class=article-content에 내용 들이있고 img태그로 모든이미지가 있구나~\"\n\n라고 알수있다.\n\n그러면 이 작업을 코드로 짜보도록하자.\n\n```py\nfrom bs4.element import Tag\nimport requests\nfrom bs4 import BeautifulSoup\n\n# 내용 요청\nr = requests.get(\"https://talk.op.gg/s/lol/free/589588/op-gg%EB%8A%94-%EC%9D%BC%EB%A3%A8%EB%AF%B8%EB%82%98%ED%8B%B0%EC%9D%B4%EB%8B%A4\")\n\n# html로 가져오기.\ndata = r.text\n\n# BeautifulSoup 객체로 만들어주기.\nbs = BeautifulSoup(data)\n\n# div의 article-content 클래스인 엘리먼트 찾기\narticle_content = bs.find(\"div\", class_=\"article-content\")\n\n# 만약 Tag속성이면..\n# 타입을 정확하게 지정해주기 위한 방법이다.\n# 이것을 쓰지 않을경우 article-content의 반환은 다음과같다.\n# Tag | NavigableString | None\nif isinstance(article_content, Tag) :\n    # article content에서 img엘리먼트를 전부 가져온다.\n    image_element_list = article_content.find_all(\"img\")\n\n    # img 엘리먼트에서 src만 뺌\n    result = [image_element[\"src\"] for image_element in image_element_list]\n\n    # 결과출력\n    print(result)\n\n```\n\n실행 결과는 다음과같다.\n\n```sh\n['https://opgg-com-image.akamaized.net/attach/images/20190426113210.393073.jpeg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154547.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154613.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154709.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154754.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154828.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154852.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901154929.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901155001.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190901155035.393073.jpg', 'https://opgg-com-image.akamaized.net/attach/images/20190421002639.393073.png', 'https://opgg-com-image.akamaized.net/attach/images/20190421002714.393073.png', 'https://opgg-com-image.akamaized.net/attach/images/20190421002818.393073.png', 'https://opgg-com-image.akamaized.net/attach/images/20190421002956.393073.png']\n```\n\n아주 완벽하게 뽑혔다.\n\n그러면 스크립트를 짜보자.\n\n\n```py\nimport requests\n\n# stub 파일을 적용했다면 utils가 노랑색으로 뜰것이다.\n# 무시해도 좋다.\n# utils내부에 있는 Soup객체를 쓰도록하자.\nfrom utils import Downloader, Soup\n\n# 다운로더에 등록하는 클래스 메소드다.\n@Downloader.register\n# Downloader클래스를 상속받지 않을경우 문제가된다.\nclass DownloaderTalkOPGG(Downloader):\n    # 타입을 지정해준다.\n    type = \"talkopgg\"\n    # 인식할 url을 지정해주자.\n    URLS = [\"talk.op.gg\"]\n\n    # 이 메소드 없으면 스크립트 로드시 문제생김\n    def init(self) -> None:\n        pass\n\n    # 읽기 끝\n    def read(self) -> None:\n        # 밑에 코드는 위에 작성했던코드를 줄인것이다.\n        response = requests.get(self.url)\n        soup = Soup(response.text)\n\n        self.title = soup.find(\"title\").text\n\n        image_element_list = soup.find(\"div\", class_=\"article-content\").findAll(\"img\")\n\n        for image_element in image_element_list:\n            self.urls.append(image_element[\"src\"])\n```\n\n끝났다.\n\n정말 쉽지않나?\n\n해당 스크립트는 이미 히토미 다운로더에 등록되어있다.\n\n그러므로 테스트가 힘들텐데, 어케 테스트를 할것인가?\n\n간단하다.\n\n```py\nclass DownloaderTalkOPGG(Downloader):\n    # 그냥 타입만 바꿔주자~\n    type = \"test\"\n```\n\n이제 히토미 다운로더를 켜보자.\n\n스크립트 로드는 다음과같이 할수있다.\n\n<kbd>Alt</kbd> + <kbd>S</kbd>\n\n![load_script](./load_script.png)\n\n``script.py``를 로드하자.\n\n다음과 같이 넣어주자\n\n``test_:옵지링크:``\n\n![test_script](./text_script.png)\n\n결과는?\n\n![sucsex](./sucsex.png)\n\n끝!\n\n\n시간나면 js렌더링이 필요한 사이트도 한번 뜯어보도록 합시다."},"__N_SSG":true}